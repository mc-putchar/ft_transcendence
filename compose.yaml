#version: '42'

name: ft_transcendence

networks:
  transcendeNet:
    driver: bridge

configs:
  caddyfile:
    file: "${PWD}/server/Caddyfile${DEPLOY:+_deploy}"

services:
  cloudflared:
    image: cloudflare/cloudflared:2024.8.2
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - transcendeNet
    volumes:
      - ./cloudflared:/etc/cloudflared
    profiles:
      - tunnel
    restart: unless-stopped

  blockchain:
    build:
      context: "${PWD}/pong/blockchain"
    networks:
      - transcendeNet
    restart: unless-stopped

  server:
    build:
      context: "${PWD}/server"
    configs:
      - source: caddyfile
        target: /etc/caddy/Caddyfile
    volumes:
    - "${PWD}/pong/static:/usr/share/caddy/static:ro"
    - "${PWD}/pong/media:/usr/share/caddy/media:rw"
    networks:
      - transcendeNet
    ports:
      - "127.0.0.1:4243:443"
    depends_on:
      django:
        condition: service_started
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:16.3-alpine3.20
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - "${PWD}/postgres_data:/var/lib/postgresql/data:rw"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - transcendeNet
    restart: unless-stopped

  redis:
    image: redis:7.2.5-alpine
    networks:
      - transcendeNet
    restart: unless-stopped

  django:
    build:
      context: "${PWD}/pong"
    volumes:
      - "${PWD}/pong:/code:rw"
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - DJANGO_ALLOWED_HOSTS
      - DJANGO_TRUSTED_ORIGINS
      - CLIENT_ID
      - CLIENT_SECRET
      - REDIRECT_URI
      - HARDHAT_PRIVATE_KEY
      - DEBUG
    networks:
      - transcendeNet
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
