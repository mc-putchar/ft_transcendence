import { playAudioTrack, playTone } from "./audio.js";

import {
  handleLoginForm,
  handleLogoutForm,
  handleRegisterForm,
} from "./views/forms.js";

import { initWS } from "./chat.js";

// Transition durations in milliseconds
const fadeOutDuration = 200;
const fadeInDuration = 600;

const viewFunctions = {
<<<<<<< HEAD
  "/": renderContent,
  "/local": renderContent,
  "/login": renderLogin,
  "/online": renderContent,
  "/logout": renderLogout,
  "/register": renderRegister,
  "/chat": renderContent,
};

const routes = {
  "/": { endpoint: "/home_data" },
  "/local": { title: "Local", endpoint: "/local_game" },
  "/login": { title: "Login", endpoint: "/login" },
  "/online": { title: "Online", endpoint: "/online" },
  "/logout": { title: "Logout", endpoint: "/logout" },
  "/register": { title: "Register", endpoint: "/register" },
  "/chat": { title: "Chat", endpoint: "/chat/lobby" },
=======
    "/": renderHome,
    "/local": renderLocalGame,
    "/login": renderLogin,
    "/online": renderOnlineGame,
    "/logout": renderLogout,
    "/register": renderRegister,
    "/profile": renderProfile,
    "/users": renderUsersList,
    "/chat": renderChat,
};

const routes = {
    "/": { endpoint: "/home_data" },
    "/local": { title: "Local", endpoint: "/local_game" },
    "/login": { title: "Login", endpoint: "/login" },
    "/online": { title: "Online", endpoint: "/online" },
    "/logout": { title: "Logout", endpoint: "/logout" },
    "/register": { title: "Register", endpoint: "/register" },
    "/profile": { title: "Profile", endpoint: "/profile" },
    "/users": { title: "Users", endpoint: "/users" },
    "/chat": { title: "Chat", endpoint: "/chat" },
>>>>>>> origin/mc-putchar
};

const wsRoutes = ["/chat"];

function renderLogin(data) {
  return `<h2>${data.title}</h2>${data.content}`;
}

function renderLogout(data) {
  return `<h2>${data.title}</h2><p>${data.content}</p>`;
}

function renderRegister(data) {
  return `${data.content}`;
}

<<<<<<< HEAD
function renderContent(data) {
  return ` ${data.content}`;
=======
function renderProfile(data) {
    return `<div>${data.content}</div>`;
}

function renderUsersList(data) {
    return `<div>${data.content}</div>`;
}

// check if the location is different from wsRoutes in any location change
function checkWS() {
    if (!wsRoutes.includes(location.pathname)) {
        if (window.chatSocket) {
            window.chatSocket.close();
            console.log("Chat socket closed : ", window.chatSocket);
            delete window.chatSocket;
        }
    }
>>>>>>> origin/mc-putchar
}

function router() {
  let view = routes[location.pathname];
  if (view) {
    document.title = view.title;

    const appElement = document.getElementById("app");
    appElement.classList.add("fade-exit");

    fetch(view.endpoint, {
      method: "GET",
      headers: {
        "X-Requested-With": "XMLHttpRequest",
      },
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        document.title = data.title;
        const renderFunction = viewFunctions[location.pathname];
        const newContent = renderFunction
          ? renderFunction(data)
          : "<p>Page not found</p>";

        setTimeout(() => {
          appElement.innerHTML = newContent;

          appElement.classList.remove("fade-exit");
          appElement.classList.add("fade-enter");

          setTimeout(
            () => appElement.classList.remove("fade-enter"),
            fadeInDuration,
          );
          if (location.pathname === "/login") {
            handleLoginForm();
            document.getElementById("username").focus();
          } else if (location.pathname === "/logout") {
            handleLogoutForm();
          } else if (location.pathname === "/register") {
            handleRegisterForm();
            document.getElementById("username").focus();
          } else if (location.pathname.startsWith("/chat")) {
            const roomName = location.pathname.split("/")[2] || "lobby";
            handleChat(roomName);
          }
        }, fadeOutDuration);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        document.getElementById("app").innerHTML =
          "<p>Error loading page content.</p>";
      });
  } else {
    if (location.pathname.startsWith("/chat")) {
      const roomName = location.pathname.split("/")[2];
      fetch("/chat/" + roomName + "/", {
        method: "GET",
        headers: { "X-Requested-With": "XMLHttpRequest" },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          document.title = data.title;
          document.getElementById("app").innerHTML = data.content;
        });
<<<<<<< HEAD
=======
    } else {
        if (location.pathname.startsWith("/users/")) {
            fetch(location.pathname + '/', {
                method: 'GET',
                headers: {
                    'X-CSRFToken': csrftoken,
                    'X-Requested-With': 'XMLHttpRequest',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                document.title = data.title;
                const appElement = document.getElementById("app");
                const newContent = data.content;
                // document.getElementById("app").innerHTML = `<p>${data.content}</p>`;
                setTimeout(() => {
                    appElement.innerHTML = newContent;
    
                    appElement.classList.remove('fade-exit');
                    appElement.classList.add('fade-enter');
    
                    setTimeout(() => appElement.classList.remove('fade-enter'), fadeInDuration);
                }, fadeOutDuration);
            })
            .catch(error => {
                console.error("Error fetching data:", error);
                document.getElementById('app').innerHTML = "<p>Requested user not found</p>";
            });
            history.replaceState("", "", location.pathname);
        } else {
            history.replaceState("", "", "/");
            router();
        }
>>>>>>> origin/mc-putchar
    }
  }
}

function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}

export const csrftoken = getCookie("csrftoken");

function handleChat(roomName) {
  initWS(roomName);
}

document.getElementById("app").addEventListener("click", (event) => {
  // playTone(222, 0.5, 122);
});

window.addEventListener("popstate", router());


document.addEventListener("click", (e) => {
  if (e.target.matches("[data-link]")) {
    e.preventDefault();
    history.pushState("", "", e.target.href);
    router();
  }
});

document.addEventListener("DOMContentLoaded", () => {
     router();
});

export { router };
